import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart
import requests
import os
from dotenv import load_dotenv

load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
language_filter = "–ª—é–±–æ–π"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —è–∑—ã–∫ "–ª—é–±–æ–π"
default_publications = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class PublicationStates(StatesGroup):
    wait = State()
    waiting_for_num = State()
    waiting_for_topic = State()
    waiting_for_author = State()
    waiting_for_doi = State()
    waiting_for_language = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
def get_main_keyboard():
    buttons = [
        [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ")],
        [KeyboardButton(text="üë§ –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É")],
        [KeyboardButton(text="üìú –ü–æ–∏—Å–∫ –ø–æ DOI")],
        [KeyboardButton(text="üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π")],
        [KeyboardButton(text="üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞–≤–∞–µ–º—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(CommandStart())
async def send_welcome(message: types.Message, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    data = await state.get_data()
    if "num_publications" not in data:
        await state.update_data(num_publications=default_publications)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞—É—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text == "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–¥–∞–≤–∞–µ–º—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
async def set_num_publications(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:")
    await state.set_state(PublicationStates.waiting_for_num)

@dp.message(PublicationStates.waiting_for_num)
async def handle_num_input(message: types.Message, state: FSMContext):
    try:
        num_publications = int(message.text)
        if num_publications > 0:
            await state.update_data(num_publications=num_publications)
            await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {num_publications}", reply_markup=get_main_keyboard())
            await state.set_state(PublicationStates.wait)

            data = await state.get_data()
            print(data)
        else:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

@dp.message(lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ")
async def search_by_topic(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
    await state.set_state(PublicationStates.waiting_for_topic)

@dp.message(PublicationStates.waiting_for_topic)
async def handle_topic_input(message: types.Message, state: FSMContext):
    topic = message.text
    data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    num_publications = data.get("num_publications", default_publications)
    print(num_publications)
    results = search_publications_by_topic(topic, num_publications)
    if results:
        await message.answer(f"–ù–∞–π–¥–µ–Ω–æ {len(results)} –ø—É–±–ª–∏–∫–∞—Ü–∏–π:")
        for result in results:
            await message.answer(result)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–µ.")
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
@dp.message(lambda message: message.text == "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
async def set_language(message: types.Message, state: FSMContext):
    global language_filter
    language_keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("–†—É—Å—Å–∫–∏–π"), KeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"), KeyboardButton("–õ—é–±–æ–π")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:", reply_markup=language_keyboard)
    await state.set_state(PublicationStates.waiting_for_language)

@dp.message(PublicationStates.waiting_for_language)
async def handle_language_input(message: types.Message, state: FSMContext):
    global language_filter
    language = message.text
    if language in ["–†—É—Å—Å–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "–õ—é–±–æ–π"]:
        language_filter = language
        await message.answer(f"–Ø–∑—ã–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {language}", reply_markup=get_main_keyboard())
        await state.clear()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")

# –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ CrossRef API
def search_publications_by_topic(topic, limit):
    try:
        url = f"https://api.crossref.org/works?query={topic}"
        response = requests.get(url)
        response.raise_for_status()
        items = response.json().get('message', {}).get('items', [])
        return [item.get('URL', '–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞') for item in items[:limit] if filter_by_language(item)]
    except requests.RequestException:
        return []

def filter_by_language(item):
    global language_filter
    if language_filter == "–†—É—Å—Å–∫–∏–π":
        return item.get('language', '').lower() == "ru"
    elif language_filter == "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π":
        return item.get('language', '').lower() == "en"
    return True

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
